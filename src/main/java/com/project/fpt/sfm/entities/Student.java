package com.project.fpt.sfm.entities;
// Generated Oct 12, 2015 2:10:19 AM by Hibernate Tools 4.3.1


import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * StudentModel generated by hbm2java
 */
@Entity
@Table(name = "student"
        , catalog = "sfm"
        , uniqueConstraints = {@UniqueConstraint(columnNames = "StudentCode"), @UniqueConstraint(columnNames = "SSN")}
)
public class Student implements java.io.Serializable {


    private Integer studentId;
    private User user;
    private FinancialType financialType;
    private Major major;
    private String currentStudyStage;
    private String status;
    private String fullName;
    private String studentCode;
    private boolean gender;
    private Date dateOfBirth;
    private String email;
    private String ssn;
    private String phoneNumber;
    private String address;
    private boolean isGraduated;
    private String subMajor;
    private String term;
    private String narrowSpecialization;
    private String parentPhone;
    private String parentEmail;
    private String note;
    private Boolean isActive;
    private Date dateCreated;
    private Date dateUpdated;
    private InvestmentStudent investmentStudent;
    private Set<RetakeSubjectPayment> retakeSubjectPayments = new HashSet<RetakeSubjectPayment>(0);
    private Set<TuitionPayment> tuitionPayments = new HashSet<TuitionPayment>(0);
    private Set<Course> courses = new HashSet<Course>(0);
    private CreditStudent creditStudent;

    public Student() {
        this.dateCreated = new Date();
        this.dateUpdated = new Date();
        this.isActive = true;
        this.note = "-";
    }


    public Student(User user, FinancialType financialType, Major major, String status, String fullName, String studentCode, boolean gender, String email, String ssn, boolean isGraduated, String subMajor, String term, String narrowSpecialization) {
        this.user = user;
        this.financialType = financialType;
        this.major = major;
        this.status = status;
        this.fullName = fullName;
        this.studentCode = studentCode;
        this.gender = gender;
        this.email = email;
        this.ssn = ssn;
        this.isGraduated = isGraduated;
        this.subMajor = subMajor;
        this.term = term;
        this.narrowSpecialization = narrowSpecialization;
    }

    public Student(User user, FinancialType financialType, Major major, String status, String fullName, String studentCode, boolean gender, Date dateOfBirth, String email, String ssn, String phoneNumber, String address, boolean isGraduated, String subMajor, String term, String narrowSpecialization, String parentPhone, String parentEmail, String note, Boolean isActive, Date dateCreated, Date dateUpdated, InvestmentStudent investmentStudent, Set<RetakeSubjectPayment> retakeSubjectPayments, Set<TuitionPayment> tuitionPayments, Set<Course> courses, CreditStudent creditStudent) {
        this.user = user;
        this.financialType = financialType;
        this.major = major;
        this.status = status;
        this.fullName = fullName;
        this.studentCode = studentCode;
        this.gender = gender;
        this.dateOfBirth = dateOfBirth;
        this.email = email;
        this.ssn = ssn;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.isGraduated = isGraduated;
        this.subMajor = subMajor;
        this.term = term;
        this.narrowSpecialization = narrowSpecialization;
        this.parentPhone = parentPhone;
        this.parentEmail = parentEmail;
        this.note = note;
        this.isActive = isActive;
        this.dateCreated = dateCreated;
        this.dateUpdated = dateUpdated;
        this.investmentStudent = investmentStudent;
        this.retakeSubjectPayments = retakeSubjectPayments;
        this.tuitionPayments = tuitionPayments;
        this.courses = courses;
        this.creditStudent = creditStudent;
    }

    @GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "user"))
    @Id
    @GeneratedValue(generator = "generator")


    @Column(name = "StudentID", unique = true, nullable = false)
    public Integer getStudentId() {
        return this.studentId;
    }

    public void setStudentId(Integer studentId) {
        this.studentId = studentId;
    }

    @OneToOne(fetch = FetchType.LAZY)
    @PrimaryKeyJoinColumn
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FinancialTypeID", nullable = false)
    public FinancialType getFinancialType() {
        return this.financialType;
    }

    public void setFinancialType(FinancialType financialType) {
        this.financialType = financialType;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MajorID", nullable = false)
    public Major getMajor() {
        return this.major;
    }

    public void setMajor(Major major) {
        this.major = major;
    }

    @Column(name = "Status", nullable = false, length = 30)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }


    @Column(name = "FullName", nullable = false, length = 64)
    public String getFullName() {
        return this.fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }


    @Column(name = "StudentCode", unique = true, nullable = false, length = 10)
    public String getStudentCode() {
        return this.studentCode;
    }

    public void setStudentCode(String studentCode) {
        this.studentCode = studentCode;
    }


    @Column(name = "Gender", nullable = false)
    public boolean isGender() {
        return this.gender;
    }

    public void setGender(boolean gender) {
        this.gender = gender;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DateOfBirth", length = 19)
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }


    @Column(name = "Email", nullable = false)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "CurrentStudyStage", nullable = false, length = 10)
    public String getCurrentStudyStage() {
        return currentStudyStage;
    }

    public void setCurrentStudyStage(String currentStudyStage) {
        this.currentStudyStage = currentStudyStage;
    }

    @Column(name = "SSN", unique = true, nullable = false, length = 10)
    public String getSsn() {
        return this.ssn;
    }

    public void setSsn(String ssn) {
        this.ssn = ssn;
    }


    @Column(name = "PhoneNumber", length = 15)
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }


    @Column(name = "Address", length = 65535)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }


    @Column(name = "IsGraduated", nullable = false)
    public boolean isIsGraduated() {
        return this.isGraduated;
    }

    public void setIsGraduated(boolean isGraduated) {
        this.isGraduated = isGraduated;
    }


    @Column(name = "SubMajor", nullable = false, length = 45)
    public String getSubMajor() {
        return this.subMajor;
    }

    public void setSubMajor(String subMajor) {
        this.subMajor = subMajor;
    }


    @Column(name = "Term", nullable = false, length = 10)
    public String getTerm() {
        return this.term;
    }

    public void setTerm(String term) {
        this.term = term;
    }


    @Column(name = "NarrowSpecialization", nullable = false, length = 20)
    public String getNarrowSpecialization() {
        return this.narrowSpecialization;
    }

    public void setNarrowSpecialization(String narrowSpecialization) {
        this.narrowSpecialization = narrowSpecialization;
    }


    @Column(name = "ParentPhone", length = 15)
    public String getParentPhone() {
        return this.parentPhone;
    }

    public void setParentPhone(String parentPhone) {
        this.parentPhone = parentPhone;
    }


    @Column(name = "ParentEmail")
    public String getParentEmail() {
        return this.parentEmail;
    }

    public void setParentEmail(String parentEmail) {
        this.parentEmail = parentEmail;
    }


    @Column(name = "Note", length = 65535)
    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }


    @Column(name = "IsActive")
    public Boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "Date_Created", length = 19)
    public Date getDateCreated() {
        return this.dateCreated;
    }

    public void setDateCreated(Date dateCreated) {
        this.dateCreated = dateCreated;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DateUpdated", length = 19)
    public Date getDateUpdated() {
        return this.dateUpdated;
    }

    public void setDateUpdated(Date dateUpdated) {
        this.dateUpdated = dateUpdated;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "student")
    public InvestmentStudent getInvestmentStudent() {
        return this.investmentStudent;
    }

    public void setInvestmentStudent(InvestmentStudent investmentStudent) {
        this.investmentStudent = investmentStudent;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "student")
    public Set<RetakeSubjectPayment> getRetakeSubjectPayments() {
        return this.retakeSubjectPayments;
    }

    public void setRetakeSubjectPayments(Set<RetakeSubjectPayment> retakeSubjectPayments) {
        this.retakeSubjectPayments = retakeSubjectPayments;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "student")
    public Set<TuitionPayment> getTuitionPayments() {
        return this.tuitionPayments;
    }

    public void setTuitionPayments(Set<TuitionPayment> tuitionPayments) {
        this.tuitionPayments = tuitionPayments;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "student")
    public Set<Course> getCourses() {
        return this.courses;
    }

    public void setCourses(Set<Course> courses) {
        this.courses = courses;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "student")
    public CreditStudent getCreditStudent() {
        return this.creditStudent;
    }

    public void setCreditStudent(CreditStudent creditStudent) {
        this.creditStudent = creditStudent;
    }

//    @Override
//    public String toString() {
//        final StringBuffer sb = new StringBuffer("Student{");
//        sb.append("financialType=").append(financialType.getFinancialTypeName());
//        sb.append(", major=").append(major.getMajorCode());
//        sb.append(", status=").append(status);
//        sb.append(", fullName='").append(fullName).append('\'');
//        sb.append(", studentCode='").append(studentCode).append('\'');
//        sb.append(", gender=").append(gender);
//        sb.append(", dateOfBirth=").append(dateOfBirth);
//        sb.append(", email='").append(email).append('\'');
//        sb.append(", ssn='").append(ssn).append('\'');
//        sb.append(", phoneNumber='").append(phoneNumber).append('\'');
//        sb.append(", address='").append(address).append('\'');
//        sb.append(", isGraduated=").append(isGraduated);
//        sb.append(", subMajor='").append(subMajor).append('\'');
//        sb.append(", term='").append(term).append('\'');
//        sb.append(", narrowSpecialization='").append(narrowSpecialization).append('\'');
//        sb.append(", parentPhone='").append(parentPhone).append('\'');
//        sb.append(", parentEmail='").append(parentEmail).append('\'');
//        sb.append(", note='").append(note).append('\'');
//        sb.append(", isActive=").append(isActive);
//        sb.append(", dateCreated=").append(dateCreated);
//        sb.append(", dateUpdated=").append(dateUpdated);
//        sb.append('}');
//        return sb.toString();
//    }
}


